{"version":3,"sources":["../server.ts","../src/utils/sass.js"],"sourcesContent":["// ideally this file stays as pure js so we don't have to compile.\n// vite handles compiling all other files\nimport express from \"express\";\n// @ts-expect-error\nimport { createServer as createViteServer } from \"vite\";\n// TODO: add .vue file support (will need to do same in oscar)\n// atm the plugin imports from 'vue' and doesn't let us specify url instead\n// so would need that fixed. until then have to use a package.json\nimport vue from \"@vitejs/plugin-vue\";\n\nexport * from \"./src/utils/sass.js\";\nimport { viteSassToCss } from \"./src/utils/sass.js\";\n\nconst PORT = process.env.SPOROCARP_PORT || 8000;\n\n// truffle-cli passes in { packageVersion } (for getting org, etc... with setup.lcal)\nexport async function startServer(options: Record<string, any>) {\n  let vite: any;\n  if (process.env.NODE_ENV !== \"production\") {\n    vite = await createViteServer({\n      appType: \"custom\",\n      logLevel: \"silent\",\n      plugins: [\n        viteSassToCss(),\n        // https://shoelace.style/frameworks/vue?id=configuration\n        vue({\n          template: {\n            compilerOptions: {\n              isCustomElement: (tag) => tag.startsWith(\"tfl-\"),\n            },\n          },\n        }),\n      ],\n      ssr: { external: [\"glob\"] }, // errors w/o this\n      server: {\n        hmr: process.env.NODE_ENV !== \"production\",\n        middlewareMode: true,\n        // FIXME: I think we might be able to disable when this package is installed via hosted github\n        // (vs installed from local)\n        fs: { strict: false },\n      },\n    });\n  }\n\n  const app = express();\n\n  if (process.env.NODE_ENV === \"production\") {\n    const dir = new URL(import.meta.url)\n      .toString()\n      .replace(\"file://\", \"\");\n    app.use(express.static(dir));\n  } else {\n    app.use(vite.middlewares);\n  }\n\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n    console.log(`Loading ${url}`);\n\n    try {\n      let render;\n      if (process.env.NODE_ENV === \"production\") {\n        // @ts-expect-error\n        ({ render } = await import(\"./server-entry.js\"));\n      } else {\n        // vite doesn't like file urls :(\n        // @ts-expect-error\n        const entry = (await import.meta.resolve(\"./server-entry.js\"))\n          .toString().replace(\n            \"file://\",\n            \"\",\n          );\n        ({ render } = await vite.ssrLoadModule(entry));\n      }\n      const appHtml = await render(req, res, options);\n      const html = process.env.NODE_ENV === \"production\"\n        ? appHtml\n        : await vite.transformIndexHtml(url, appHtml);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(html);\n    } catch (e) {\n      // If an error is caught, let Vite fix the stracktrace so it maps back to\n      // your actual source code.\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n  app.listen(PORT, () => console.log(`Listening on port ${PORT}`));\n  listenForExit();\n}\n\nfunction listenForExit() {\n  [\"exit\", \"SIGINT\", \"SIGUSR1\", \"SIGUSR2\", \"uncaughtException\", \"SIGTERM\"]\n    .forEach((eventType) => {\n      process.on(eventType, onExit.bind(null, { eventType }));\n    });\n}\n\nfunction onExit({ eventType }: { eventType: string }, err: Error) {\n  if (eventType === \"uncaughtException\") {\n    return console.error(\"uncaughtException\", err);\n  }\n  process.exit();\n}\n","import jscodeshift from 'jscodeshift'\nimport { applyTransform } from 'jscodeshift/src/testUtils.js'\nimport sass from 'sass'\n\nconst j = jscodeshift.withParser('tsx')\n\nexport function isSassJsFile(filename) {\n  return filename.match(/\\.s(a|c)ss\\.js$/)\n}\n\nexport function viteSassToCss() {\n  return {\n    name: \"sass-literal-to-css-literal\",\n    transform(src, id) {\n      if (isSassJsFile(id)) {\n        src = replaceSassLiteralWithCssLiteral(src);\n\n        return {\n          code: src,\n          map: null, // provide source map if available\n        };\n      }\n    },\n  };\n}\n\nfunction isSassTag (node) {\n  return node.tag.name.match(/^s(a|c)ss$/)\n}\n\nexport function transformSassLiteral (js) { jscodeshift \n  return j(js)\n    .find(j.TaggedTemplateExpression, isSassTag)\n    .replaceWith((node) => {\n      if (node.value.quasi.quasis.length > 1) {\n        throw new Error('Interpolations not supported atm')\n      }\n      const sassStr = node.value.quasi.quasis[0].value.raw\n      const result = sass.compileString(sassStr)\n      // TODO: instead of modifying in place we should j.taggedTemplateExpression(...)\n      // jscodeshift docs suck though\n      node.value.quasi.quasis[0].value.raw = result.css\n      node.value.quasi.quasis[0].value.cooked = result.css\n      return node.value\n    }).toSource()\n}\n\nexport function replaceSassLiteralWithCssLiteral (js) {\n  return applyTransform(transformSassLiteral, {}, js)\n}\n"],"mappings":"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","names":[]}